<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>ai.skymind</groupId>
  <artifactId>traininglabs</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>traininglabs</name>
  <url>http://skymind.ai</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>

    <!-- misc components -->
    <junit.version>4.12</junit.version>
    <jcommander.version>1.72</jcommander.version>
    <guava.version>20.0</guava.version>
    <logback.version>1.1.7</logback.version>
    <play2.version>2.6.2</play2.version>
    <lombok.version>1.18.2</lombok.version>
    <apache.commons.io.version>1.3.2</apache.commons.io.version>
    <org.apache.http.version>4.3.5</org.apache.http.version>
    <!--language components -->
    <java.version>1.8</java.version>
    <scala.binary.version>2.11</scala.binary.version>   <!-- for spark, should be _2.10 or _2.11 -->
    <!--nltk cleartk version -->
    <cleartk.version>2.0.0</cleartk.version>

    <!-- latest version release -->
    <nd4j.version>1.0.0-beta3</nd4j.version>
    <datavec.version>1.0.0-beta3</datavec.version>
    <arbiter.version>1.0.0-beta3</arbiter.version>
    <dl4j.version>1.0.0-beta3</dl4j.version>
    <arbiter.version>1.0.0-beta3</arbiter.version>
    <!-- Change the nd4j.backend property to nd4j-cuda-8.0-platform to use CUDA GPUs -->
    <nd4j.backend>nd4j-native-platform</nd4j.backend>
  </properties>

  <!-- for switching to appropriate backends -->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.nd4j</groupId>
        <artifactId>nd4j-native-platform</artifactId>
        <version>${nd4j.version}</version>
      </dependency>
      <dependency>
        <groupId>org.nd4j</groupId>
        <artifactId>nd4j-cuda-9.0-platform</artifactId>
        <version>${nd4j.version}</version>
      </dependency>
      <dependency>
        <groupId>org.nd4j</groupId>
        <artifactId>nd4j-cuda-9.2-platform</artifactId>
        <version>${nd4j.version}</version>
      </dependency>
      <dependency>
        <groupId>org.nd4j</groupId>
        <artifactId>nd4j-cuda-10.0-platform</artifactId>
        <version>${nd4j.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>


  <dependencies>
    <!--testing components -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- misc components -->
    <!--
       <dependency>
         <groupId>org.apache.commons</groupId>
         <artifactId>commons-io</artifactId>
         <version>${apache.commons.io.version}</version>
       </dependency>
    -->
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>${org.apache.http.version}</version>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- nlp specific dependencies -->
    <dependency>
      <groupId>org.cleartk</groupId>
      <artifactId>cleartk-snowball</artifactId>
      <version>${cleartk.version}</version>
    </dependency>
    <dependency>
      <groupId>org.cleartk</groupId>
      <artifactId>cleartk-opennlp-tools</artifactId>
      <version>${cleartk.version}</version>
    </dependency>
    <dependency>
      <groupId>org.deeplearning4j</groupId>
      <artifactId>deeplearning4j-nlp</artifactId>
      <version>${dl4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.deeplearning4j</groupId>
      <artifactId>deeplearning4j-nlp-uima</artifactId>
      <version>${dl4j.version}</version>
    </dependency>


    <!-- datavec-data-codec: used only in video example for loading video data -->
    <dependency>
      <artifactId>datavec-data-codec</artifactId>
      <groupId>org.datavec</groupId>
      <version>${datavec.version}</version>
    </dependency>
    <!-- additional datavec usage -->
    <dependency>
      <groupId>org.datavec</groupId>
      <artifactId>datavec-api</artifactId>
      <version>${datavec.version}</version>
    </dependency>
    <!-- nd4j, backend dependencies -->
    <dependency>
      <groupId>org.nd4j</groupId>
      <artifactId>${nd4j.backend}</artifactId>
      <version>${nd4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.nd4j</groupId>
      <artifactId>nd4j-kryo_${scala.binary.version}</artifactId>
      <version>${nd4j.version}</version>
    </dependency>
    <!-- Core DL4J functionality -->
    <dependency>
      <groupId>org.deeplearning4j</groupId>
      <artifactId>deeplearning4j-core</artifactId>
      <version>${dl4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.deeplearning4j</groupId>
      <artifactId>deeplearning4j-zoo</artifactId>
      <version>${dl4j.version}</version>
    </dependency>
    <!-- deeplearning4j-ui is used for visualization: see http://deeplearning4j.org/visualization -->
    <dependency>
      <groupId>org.deeplearning4j</groupId>
      <artifactId>deeplearning4j-ui_${scala.binary.version}</artifactId>
      <version>${dl4j.version}</version>
    </dependency>

    <!-- Arbiter - used for hyperparameter optimization (grid/random search) -->
    <dependency>
      <groupId>org.deeplearning4j</groupId>
      <artifactId>arbiter-deeplearning4j</artifactId>
      <version>${arbiter.version}</version>
    </dependency>
    <dependency>
      <groupId>org.deeplearning4j</groupId>
      <artifactId>arbiter-ui_${scala.binary.version}</artifactId>
      <version>${arbiter.version}</version>
    </dependency>

  </dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.7.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.20.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
